const mongoose = require('mongoose');
require('dotenv').config();

// Cores para console
const colors = {
    green: '\x1b[32m',
    red: '\x1b[31m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    reset: '\x1b[0m'
};

async function testarConexaoMongoDB() {
    console.log(`${colors.blue}üîç Testando conex√£o com MongoDB Atlas...${colors.reset}`);
    
    try {
        // Obter URI do MongoDB das vari√°veis de ambiente
        const mongoUri = process.env.MONGODB_URI || process.env.MONGO_URI;
        
        if (!mongoUri) {
            console.log(`${colors.red}‚ùå ERRO: Vari√°vel MONGODB_URI n√£o encontrada no .env${colors.reset}`);
            console.log(`${colors.yellow}üí° Configure sua string de conex√£o MongoDB Atlas em .env.industrial${colors.reset}`);
            process.exit(1);
        }

        console.log(`${colors.blue}üì° Conectando ao MongoDB...${colors.reset}`);
        console.log(`${colors.blue}üîó URI: ${mongoUri.replace(/\/\/[^:]+:[^@]+@/, '//***:***@')}${colors.reset}`);

        // Configura√ß√£o de conex√£o com timeouts reduzidos para teste
        const options = {
            maxPoolSize: 5,
            minPoolSize: 1,
            maxIdleTimeMS: 30000,
            serverSelectionTimeoutMS: 5000,
            socketTimeoutMS: 45000,
            bufferCommands: false,
        };

        await mongoose.connect(mongoUri, options);
        
        console.log(`${colors.green}‚úÖ MongoDB Atlas conectado com sucesso!${colors.reset}`);
        console.log(`${colors.green}üìä Database: ${mongoose.connection.name}${colors.reset}`);
        console.log(`${colors.green}üè† Host: ${mongoose.connection.host}${colors.reset}`);
        console.log(`${colors.green}üìà Estado: ${mongoose.connection.readyState === 1 ? 'Conectado' : 'Desconectado'}${colors.reset}`);

        // Testar opera√ß√µes b√°sicas
        console.log(`${colors.blue}üß™ Testando opera√ß√µes b√°sicas...${colors.reset}`);
        
        // Listar cole√ß√µes existentes
        const collections = await mongoose.connection.db.listCollections().toArray();
        console.log(`${colors.green}üìö Cole√ß√µes encontradas: ${collections.length}${colors.reset}`);
        
        if (collections.length > 0) {
            collections.forEach(col => {
                console.log(`${colors.green}  - ${col.name}${colors.reset}`);
            });
        }

        // Testar inser√ß√£o simples
        const TestSchema = new mongoose.Schema({
            nome: String,
            timestamp: { type: Date, default: Date.now }
        });
        
        const TestModel = mongoose.model('conexao_teste', TestSchema);
        
        const testeDoc = new TestModel({
            nome: 'Teste de conex√£o ArcSat Industrial'
        });
        
        await testeDoc.save();
        console.log(`${colors.green}‚úÖ Documento de teste inserido com sucesso!${colors.reset}`);
        
        // Buscar documento
        const docEncontrado = await TestModel.findOne({ nome: 'Teste de conex√£o ArcSat Industrial' });
        if (docEncontrado) {
            console.log(`${colors.green}‚úÖ Documento encontrado: ${docEncontrado._id}${colors.reset}`);
        }
        
        // Limpar teste
        await TestModel.deleteOne({ _id: docEncontrado._id });
        console.log(`${colors.green}üßπ Documento de teste removido${colors.reset}`);

        console.log(`${colors.green}üéâ Todos os testes passaram! MongoDB Atlas est√° funcionando perfeitamente.${colors.reset}`);
        
    } catch (error) {
        console.log(`${colors.red}‚ùå ERRO na conex√£o MongoDB:${colors.reset}`);
        console.log(`${colors.red}   ${error.message}${colors.reset}`);
        
        // Diagn√≥sticos espec√≠ficos
        if (error.message.includes('authentication failed')) {
            console.log(`${colors.yellow}üí° Problema de autentica√ß√£o - verifique usu√°rio e senha${colors.reset}`);
        } else if (error.message.includes('ENOTFOUND')) {
            console.log(`${colors.yellow}üí° Problema de DNS - verifique a URL do cluster${colors.reset}`);
        } else if (error.message.includes('timeout')) {
            console.log(`${colors.yellow}üí° Timeout de conex√£o - verifique firewall/IP whitelist${colors.reset}`);
        }
        
        console.log(`${colors.yellow}üìñ Guia de solu√ß√£o de problemas:${colors.reset}`);
        console.log(`${colors.yellow}   1. Verificar string de conex√£o em .env.industrial${colors.reset}`);
        console.log(`${colors.yellow}   2. Verificar usu√°rio e senha no MongoDB Atlas${colors.reset}`);
        console.log(`${colors.yellow}   3. Verificar IP whitelist (0.0.0.0/0 para teste)${colors.reset}`);
        console.log(`${colors.yellow}   4. Verificar se o cluster est√° ativo${colors.reset}`);
        
        process.exit(1);
    } finally {
        await mongoose.disconnect();
        console.log(`${colors.blue}üîå Conex√£o fechada${colors.reset}`);
    }
}

// Executar teste
testarConexaoMongoDB();