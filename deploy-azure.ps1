# Script de Deploy Automatizado - ArcSat CRM
# Azure App Service com dom√≠nio crm.avila.inc

param(
    [Parameter(Mandatory=$false)]
    [string]$ResourceGroup = "rg-arcsat-crm",
    
    [Parameter(Mandatory=$false)]
    [string]$Location = "brazilsouth",
    
    [Parameter(Mandatory=$false)]
    [string]$AppName = "arcsat-crm",
    
    [Parameter(Mandatory=$false)]
    [string]$CustomDomain = "crm.avila.inc",
    
    [Parameter(Mandatory=$false)]
    [string]$Sku = "B1",
    
    [Parameter(Mandatory=$false)]
    [switch]$SetupInfrastructure,
    
    [Parameter(Mandatory=$false)]
    [switch]$ConfigureDomain,
    
    [Parameter(Mandatory=$false)]
    [switch]$ConfigureSSL,
    
    [Parameter(Mandatory=$false)]
    [switch]$Deploy,
    
    [Parameter(Mandatory=$false)]
    [switch]$All
)

# Cores para output
function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

# Banner
Write-ColorOutput "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" "Cyan"
Write-ColorOutput "‚ïë         üöÄ ArcSat CRM - Deploy Autom√°tico            ‚ïë" "Cyan"
Write-ColorOutput "‚ïë              Deploy para crm.avila.inc                ‚ïë" "Cyan"
Write-ColorOutput "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" "Cyan"
Write-Host ""

# Verificar se Azure CLI est√° instalado
Write-ColorOutput "üîç Verificando Azure CLI..." "Yellow"
$azVersion = az version 2>$null
if (-not $azVersion) {
    Write-ColorOutput "‚ùå Azure CLI n√£o encontrado. Instale em: https://aka.ms/installazurecli" "Red"
    exit 1
}
Write-ColorOutput "‚úÖ Azure CLI encontrado" "Green"

# Login no Azure
Write-ColorOutput "`nüîê Verificando login no Azure..." "Yellow"
$account = az account show 2>$null | ConvertFrom-Json
if (-not $account) {
    Write-ColorOutput "‚ö†Ô∏è  N√£o est√° logado. Executando login..." "Yellow"
    az login
    $account = az account show | ConvertFrom-Json
}
Write-ColorOutput "‚úÖ Logado como: $($account.user.name)" "Green"
Write-ColorOutput "   Subscription: $($account.name)" "Gray"

# Fun√ß√£o: Setup da Infraestrutura
function Setup-Infrastructure {
    Write-ColorOutput "`nüèóÔ∏è  PASSO 1: Configurando Infraestrutura..." "Cyan"
    
    # Criar Resource Group
    Write-ColorOutput "   üì¶ Criando Resource Group..." "Yellow"
    $rgExists = az group exists --name $ResourceGroup
    if ($rgExists -eq "false") {
        az group create --name $ResourceGroup --location $Location | Out-Null
        Write-ColorOutput "   ‚úÖ Resource Group criado: $ResourceGroup" "Green"
    } else {
        Write-ColorOutput "   ‚ÑπÔ∏è  Resource Group j√° existe: $ResourceGroup" "Gray"
    }
    
    # Criar App Service Plan
    Write-ColorOutput "   üìã Criando App Service Plan..." "Yellow"
    $planName = "$AppName-plan"
    $planExists = az appservice plan show --name $planName --resource-group $ResourceGroup 2>$null
    if (-not $planExists) {
        az appservice plan create `
            --name $planName `
            --resource-group $ResourceGroup `
            --sku $Sku `
            --is-linux `
            --location $Location | Out-Null
        Write-ColorOutput "   ‚úÖ App Service Plan criado: $planName ($Sku)" "Green"
    } else {
        Write-ColorOutput "   ‚ÑπÔ∏è  App Service Plan j√° existe: $planName" "Gray"
    }
    
    # Criar Web App
    Write-ColorOutput "   üåê Criando Web App..." "Yellow"
    $webAppExists = az webapp show --name $AppName --resource-group $ResourceGroup 2>$null
    if (-not $webAppExists) {
        az webapp create `
            --name $AppName `
            --resource-group $ResourceGroup `
            --plan $planName `
            --runtime "NODE:20-lts" | Out-Null
        Write-ColorOutput "   ‚úÖ Web App criado: $AppName" "Green"
    } else {
        Write-ColorOutput "   ‚ÑπÔ∏è  Web App j√° existe: $AppName" "Gray"
    }
    
    # Configurar Always On
    Write-ColorOutput "   ‚öôÔ∏è  Configurando Always On..." "Yellow"
    az webapp config set `
        --name $AppName `
        --resource-group $ResourceGroup `
        --always-on true `
        --http20-enabled true `
        --min-tls-version 1.2 `
        --ftps-state Disabled | Out-Null
    Write-ColorOutput "   ‚úÖ Configura√ß√µes aplicadas" "Green"
    
    # Configurar App Settings
    Write-ColorOutput "   üîß Configurando vari√°veis de ambiente..." "Yellow"
    az webapp config appsettings set `
        --name $AppName `
        --resource-group $ResourceGroup `
        --settings `
            NODE_ENV=production `
            WEBSITE_NODE_DEFAULT_VERSION="~20" `
            SCM_DO_BUILD_DURING_DEPLOYMENT=true | Out-Null
    Write-ColorOutput "   ‚úÖ Vari√°veis configuradas" "Green"
    
    Write-ColorOutput "`n‚úÖ Infraestrutura configurada com sucesso!" "Green"
}

# Fun√ß√£o: Configurar Dom√≠nio Personalizado
function Configure-CustomDomain {
    Write-ColorOutput "`nüåê PASSO 2: Configurando Dom√≠nio Personalizado..." "Cyan"
    
    Write-ColorOutput "   ‚ö†Ô∏è  ATEN√á√ÉO: Configure o DNS primeiro!" "Yellow"
    Write-ColorOutput "   üìù Adicione este registro no seu DNS:" "White"
    Write-ColorOutput "      Tipo: CNAME" "Gray"
    Write-ColorOutput "      Nome: crm" "Gray"
    Write-ColorOutput "      Valor: $AppName.azurewebsites.net" "Gray"
    Write-ColorOutput "      TTL: 300" "Gray"
    
    $continue = Read-Host "`n   DNS configurado? (s/n)"
    if ($continue -ne "s") {
        Write-ColorOutput "   ‚è∏Ô∏è  Configura√ß√£o de dom√≠nio cancelada" "Yellow"
        return
    }
    
    Write-ColorOutput "`n   üîç Verificando dom√≠nio..." "Yellow"
    Start-Sleep -Seconds 3
    
    # Adicionar dom√≠nio personalizado
    Write-ColorOutput "   ‚ûï Adicionando dom√≠nio ao Web App..." "Yellow"
    try {
        az webapp config hostname add `
            --webapp-name $AppName `
            --resource-group $ResourceGroup `
            --hostname $CustomDomain 2>$null | Out-Null
        Write-ColorOutput "   ‚úÖ Dom√≠nio adicionado: $CustomDomain" "Green"
    } catch {
        Write-ColorOutput "   ‚ö†Ô∏è  Erro ao adicionar dom√≠nio. Verifique o DNS." "Red"
    }
}

# Fun√ß√£o: Configurar SSL
function Configure-SSL {
    Write-ColorOutput "`nüîí PASSO 3: Configurando SSL (HTTPS)..." "Cyan"
    
    Write-ColorOutput "   üìú Criando certificado gerenciado gratuito..." "Yellow"
    try {
        # Criar certificado gerenciado
        az webapp config ssl create `
            --name $AppName `
            --resource-group $ResourceGroup `
            --hostname $CustomDomain | Out-Null
        
        Write-ColorOutput "   ‚úÖ Certificado SSL criado e vinculado" "Green"
        Write-ColorOutput "   üîê HTTPS habilitado para: https://$CustomDomain" "Green"
    } catch {
        Write-ColorOutput "   ‚ö†Ô∏è  Certificado j√° existe ou dom√≠nio n√£o verificado" "Yellow"
    }
    
    # For√ßar HTTPS
    Write-ColorOutput "   üîí For√ßando redirecionamento HTTPS..." "Yellow"
    az webapp update `
        --name $AppName `
        --resource-group $ResourceGroup `
        --https-only true | Out-Null
    Write-ColorOutput "   ‚úÖ HTTPS obrigat√≥rio configurado" "Green"
}

# Fun√ß√£o: Deploy da Aplica√ß√£o
function Deploy-Application {
    Write-ColorOutput "`nüöÄ PASSO 4: Deploy da Aplica√ß√£o..." "Cyan"
    
    # Build do Frontend
    Write-ColorOutput "   üì¶ Build do Frontend Next.js..." "Yellow"
    Push-Location "frontend\arcsat-landing"
    if (Test-Path "node_modules") {
        npm run build
    } else {
        Write-ColorOutput "   ‚ö†Ô∏è  Instalando depend√™ncias..." "Yellow"
        npm install
        npm run build
    }
    Pop-Location
    Write-ColorOutput "   ‚úÖ Frontend build conclu√≠do" "Green"
    
    # Criar pacote de deploy
    Write-ColorOutput "   üì¶ Criando pacote de deploy..." "Yellow"
    if (Test-Path "deployment.zip") {
        Remove-Item "deployment.zip"
    }
    
    Compress-Archive -Path `
        "src", `
        "frontend/arcsat-landing/.next", `
        "frontend/arcsat-landing/public", `
        "frontend/arcsat-landing/next.config.ts", `
        "frontend/arcsat-landing/package.json", `
        "package.json", `
        "package-lock.json" `
        -DestinationPath "deployment.zip" -CompressionLevel Optimal
    
    Write-ColorOutput "   ‚úÖ Pacote criado: deployment.zip" "Green"
    
    # Deploy no Azure
    Write-ColorOutput "   üöÄ Fazendo deploy no Azure..." "Yellow"
    az webapp deployment source config-zip `
        --resource-group $ResourceGroup `
        --name $AppName `
        --src "deployment.zip" | Out-Null
    
    Write-ColorOutput "   ‚úÖ Deploy conclu√≠do!" "Green"
    
    # Reiniciar aplica√ß√£o
    Write-ColorOutput "   üîÑ Reiniciando aplica√ß√£o..." "Yellow"
    az webapp restart `
        --name $AppName `
        --resource-group $ResourceGroup | Out-Null
    Write-ColorOutput "   ‚úÖ Aplica√ß√£o reiniciada" "Green"
}

# Fun√ß√£o: Verifica√ß√£o
function Verify-Deployment {
    Write-ColorOutput "`n‚úÖ VERIFICA√á√ÉO FINAL..." "Cyan"
    
    Write-ColorOutput "   üîç Status do Web App..." "Yellow"
    $webApp = az webapp show `
        --name $AppName `
        --resource-group $ResourceGroup | ConvertFrom-Json
    
    Write-ColorOutput "   Estado: $($webApp.state)" "Green"
    Write-ColorOutput "   URL Default: https://$($webApp.defaultHostName)" "Green"
    Write-ColorOutput "   URL Customizada: https://$CustomDomain" "Green"
    
    Write-ColorOutput "`n   üìä Testando endpoints..." "Yellow"
    Start-Sleep -Seconds 5
    
    try {
        $response = Invoke-WebRequest -Uri "https://$CustomDomain" -UseBasicParsing -TimeoutSec 10
        Write-ColorOutput "   ‚úÖ Site respondendo: Status $($response.StatusCode)" "Green"
    } catch {
        Write-ColorOutput "   ‚ö†Ô∏è  Aguarde alguns minutos para propaga√ß√£o..." "Yellow"
    }
}

# Execu√ß√£o Principal
try {
    if ($All -or $SetupInfrastructure) {
        Setup-Infrastructure
    }
    
    if ($All -or $ConfigureDomain) {
        Configure-CustomDomain
    }
    
    if ($All -or $ConfigureSSL) {
        Configure-SSL
    }
    
    if ($All -or $Deploy) {
        Deploy-Application
    }
    
    if ($All) {
        Verify-Deployment
    }
    
    # Resumo Final
    Write-ColorOutput "`n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" "Cyan"
    Write-ColorOutput "‚ïë              ‚úÖ DEPLOY CONCLU√çDO COM SUCESSO!         ‚ïë" "Cyan"
    Write-ColorOutput "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" "Cyan"
    Write-ColorOutput "`nüåê URLs:" "White"
    Write-ColorOutput "   ‚Ä¢ Produ√ß√£o: https://$CustomDomain" "Green"
    Write-ColorOutput "   ‚Ä¢ Azure: https://$AppName.azurewebsites.net" "Gray"
    Write-ColorOutput "   ‚Ä¢ Portal: https://portal.azure.com" "Gray"
    Write-ColorOutput "`nüìä Pr√≥ximos passos:" "White"
    Write-ColorOutput "   1. Configurar vari√°veis de ambiente (MongoDB, JWT, etc)" "Gray"
    Write-ColorOutput "   2. Configurar Application Insights para monitoramento" "Gray"
    Write-ColorOutput "   3. Configurar CI/CD com GitHub Actions" "Gray"
    Write-ColorOutput "   4. Testar todos os endpoints da API" "Gray"
    
} catch {
    Write-ColorOutput "`n‚ùå ERRO: $($_.Exception.Message)" "Red"
    exit 1
}
