// ArcSat Industrial - Gest√£o de Clientes para Consultoria
// M√≥dulo integrado com MongoDB Atlas e Azure AI

import mongoose from 'mongoose';
import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import IntegradorSEFAZ from './services/integrador-sefaz.js';
import 'dotenv/config';

// Schema do Cliente Industrial - Integrado com SEFAZ
const ClienteIndustrialSchema = new mongoose.Schema({
    // Dados b√°sicos obrigat√≥rios
    nomeEmpresa: { type: String, required: true },
    cnpj: { type: String, unique: true, sparse: true },
    setor: { type: String, required: true },
    numeroFuncionarios: { type: Number, required: true },
    
    // Dados detalhados SEFAZ
    nome_fantasia: String,
    razao_social: String,
    situacao_cadastral: String,
    porte_empresa: String,
    natureza_juridica: String,
    data_abertura: String,
    capital_social: String,
    
    // Endere√ßo completo
    endereco: {
        cep: String,
        cidade: String,
        estado: String,
        endereco: String,
        logradouro: String,
        numero: String,
        complemento: String,
        bairro: String,
        endereco_completo: String
    },
    
    // Contato detalhado
    contato: {
        responsavel: String,
        telefone: String,
        email: String,
        telefone_sefaz: String,
        email_sefaz: String
    },
    
    // Atividades CNAE
    atividade_principal: {
        codigo: String,
        descricao: String
    },
    atividades_secundarias: [{
        codigo: String,
        descricao: String
    }],
    
    // Quadro societ√°rio
    quadro_societario: [{
        nome: String,
        qualificacao: String,
        pais_origem: String,
        nome_rep_legal: String,
        qual_rep_legal: String
    }],
    
    // Campos de neg√≥cio
    desafios: [String],
    especializacao: {
        type: String,
        enum: ['lean_manufacturing', 'iso_compliance', 'industry_40', 'safety_management'],
        default: 'lean_manufacturing'
    },
    etapaConsultoria: {
        type: String,
        enum: ['diagnostico_inicial', 'proposta_comercial', 'implementacao', 'monitoramento', 'finalizado'],
        default: 'diagnostico_inicial'
    },
    status: {
        type: String,
        enum: ['ativo', 'inativo', 'lead', 'cliente', 'ex_cliente'],
        default: 'lead'
    },
    
    // KPIs industriais
    kpis: {
        oee_atual: Number,
        oee_target: Number,
        defeitos_percentual: Number,
        produtividade_baseline: Number,
        custos_manutencao: Number,
        tempo_setup: Number,
        disponibilidade: Number,
        performance: Number,
        qualidade: Number
    },
    
    // An√°lise IA integrada
    analise_ia: {
        especializacao_recomendada: String,
        prioridades: [String],
        roi_estimado: String,
        timeline_meses: Number,
        modulos: [String],
        confidence_score: Number,
        observacoes_sefaz: [String],
        setor_identificado: String,
        potencial_cliente: Boolean
    },
    
    // Dados SEFAZ
    dados_sefaz: {
        ultima_consulta: Date,
        situacao_receita: String,
        status_validacao: String,
        motivo_situacao: String,
        data_situacao: String,
        ultima_atualizacao_receita: String,
        dados_originais: mongoose.Schema.Types.Mixed
    },
    
    // Hist√≥rico e documentos
    historico: [{
        timestamp: { type: Date, default: Date.now },
        acao: String,
        tipo: String,
        usuario: String,
        detalhes: mongoose.Schema.Types.Mixed
    }],
    documentos: [{
        nome: String,
        tipo: String,
        url: String,
        dataUpload: { type: Date, default: Date.now }
    }],
    
    // Timestamps
    dataCreated: { type: Date, default: Date.now },
    dataUpdated: { type: Date, default: Date.now },
    dataUltimaConsultaSefaz: Date
}, {
    timestamps: true
});

// √çndices para performance
ClienteIndustrialSchema.index({ nomeEmpresa: 'text', setor: 'text' });
ClienteIndustrialSchema.index({ setor: 1, status: 1 });
ClienteIndustrialSchema.index({ etapaConsultoria: 1 });

const ClienteIndustrial = mongoose.model('ClienteIndustrial', ClienteIndustrialSchema);

class GestaoClientesIndustrial {
    constructor() {
        this.app = express();
        this.port = process.env.PORT || 5000;
        this.integradorSEFAZ = new IntegradorSEFAZ();
        this.setupMiddleware();
        this.connectMongoDB();
        this.setupAzureAI();
        this.setupRoutes();
    }

    setupMiddleware() {
        this.app.use(helmet());
        this.app.use(cors());
        this.app.use(express.json());
        this.app.use(express.static('public'));
    }

    async connectMongoDB() {
        try {
            const mongoUri = process.env.MONGODB_URI || process.env.MONGO_URI || 'mongodb://localhost:27017/arcsat-industrial';
            
            await mongoose.connect(mongoUri, {
                maxPoolSize: 10,
                minPoolSize: 2,
                maxIdleTimeMS: 30000,
                serverSelectionTimeoutMS: 5000,
                socketTimeoutMS: 45000,
            });
            
            console.log('‚úÖ MongoDB Atlas conectado com sucesso');
            console.log(`üìä Database: ${mongoose.connection.name}`);
            
            // Event listeners para monitoramento
            mongoose.connection.on('error', (error) => {
                console.error('‚ùå Erro MongoDB:', error);
            });

            mongoose.connection.on('disconnected', () => {
                console.warn('‚ö†Ô∏è  MongoDB desconectado');
            });

            mongoose.connection.on('reconnected', () => {
                console.log('üîÑ MongoDB reconectado');
            });

        } catch (error) {
            console.error('‚ùå Erro ao conectar MongoDB Atlas:', error.message);
            console.log('üîÑ Tentando novamente em 5 segundos...');
            setTimeout(() => this.connectMongoDB(), 5000);
        }
    }

    setupAzureAI() {
        try {
            // Azure OpenAI ser√° configurado posteriormente
            // Sistema funciona offline por enquanto
            this.openaiClient = null;
            console.log('‚ö†Ô∏è  Azure OpenAI em modo offline - funcionalidades b√°sicas dispon√≠veis');
        } catch (error) {
            console.log('‚ö†Ô∏è  Erro ao configurar Azure AI:', error.message);
        }
    }

    setupRoutes() {
        // Health check
        this.app.get('/health', async (req, res) => {
            const dbStatus = mongoose.connection.readyState === 1 ? 'connected' : 'disconnected';
            const clientesCount = await ClienteIndustrial.countDocuments();
            
            res.json({ 
                status: 'ok', 
                timestamp: new Date().toISOString(),
                azure_ai: !!this.openaiClient,
                mongodb: dbStatus,
                clientes_total: clientesCount,
                version: '1.0.0'
            });
        });

        // Consulta SEFAZ por CNPJ
        this.app.get('/api/sefaz/consultar/:cnpj', async (req, res) => {
            try {
                const cnpj = req.params.cnpj;
                console.log(`üîç Consultando SEFAZ para CNPJ: ${cnpj}`);
                
                const dadosSEFAZ = await this.integradorSEFAZ.buscarDadosSEFAZ(cnpj);
                const dadosCliente = this.integradorSEFAZ.mapearParaSchemaCliente(dadosSEFAZ);
                
                // Estimar funcion√°rios se n√£o informado
                if (!dadosCliente.numeroFuncionarios) {
                    dadosCliente.numeroFuncionarios = this.integradorSEFAZ.estimarFuncionarios(dadosSEFAZ.porte);
                }
                
                res.json({ 
                    success: true, 
                    dados_sefaz: dadosSEFAZ,
                    dados_cliente: dadosCliente,
                    recomendacoes: dadosSEFAZ.analise_industrial
                });
            } catch (error) {
                console.error('Erro consulta SEFAZ:', error);
                res.status(400).json({ 
                    success: false, 
                    error: error.message,
                    codigo: 'SEFAZ_ERROR'
                });
            }
        });

        // Validar CNPJ
        this.app.get('/api/sefaz/validar/:cnpj', (req, res) => {
            try {
                const cnpj = req.params.cnpj;
                const validacao = this.integradorSEFAZ.validarCNPJ(cnpj);
                
                res.json({
                    success: true,
                    valido: validacao.valido,
                    erro: validacao.erro || null,
                    cnpj_limpo: this.integradorSEFAZ.limparCNPJ(cnpj)
                });
            } catch (error) {
                res.status(400).json({ 
                    success: false, 
                    error: error.message 
                });
            }
        });

        // Criar cliente com dados SEFAZ autom√°ticos
        this.app.post('/api/clientes/novo-sefaz', async (req, res) => {
            try {
                const { cnpj, dadosAdicionais = {} } = req.body;
                
                if (!cnpj) {
                    return res.status(400).json({ error: 'CNPJ √© obrigat√≥rio' });
                }

                console.log(`üè≠ Criando cliente com integra√ß√£o SEFAZ para: ${cnpj}`);
                
                // Buscar dados SEFAZ
                const dadosSEFAZ = await this.integradorSEFAZ.buscarDadosSEFAZ(cnpj);
                let dadosCliente = this.integradorSEFAZ.mapearParaSchemaCliente(dadosSEFAZ);
                
                // Mesclar com dados adicionais fornecidos
                dadosCliente = { ...dadosCliente, ...dadosAdicionais };
                
                // Verificar se j√° existe cliente com este CNPJ
                const clienteExistente = await ClienteIndustrial.findOne({ cnpj: dadosSEFAZ.cnpj });
                if (clienteExistente) {
                    return res.status(409).json({ 
                        success: false,
                        error: 'Cliente j√° cadastrado com este CNPJ',
                        cliente_existente: clienteExistente._id
                    });
                }
                
                // Criar cliente no MongoDB
                const cliente = new ClienteIndustrial({
                    ...dadosCliente,
                    dataUltimaConsultaSefaz: new Date()
                });

                // An√°lise inicial com IA se dispon√≠vel
                if (this.openaiClient) {
                    try {
                        const analiseIA = await this.analisarPerfilClienteComSEFAZ(cliente, dadosSEFAZ);
                        cliente.analise_ia = { ...cliente.analise_ia, ...analiseIA };
                    } catch (error) {
                        console.log('IA offline, usando an√°lise SEFAZ padr√£o');
                    }
                }

                const clienteSalvo = await cliente.save();
                
                // Registrar no hist√≥rico
                await this.adicionarHistorico(
                    clienteSalvo._id, 
                    'Cliente criado com integra√ß√£o SEFAZ autom√°tica', 
                    'criacao_sefaz',
                    { cnpj, situacao_sefaz: dadosSEFAZ.situacao_cadastral }
                );
                
                res.json({ 
                    success: true, 
                    cliente: clienteSalvo,
                    dados_sefaz: dadosSEFAZ,
                    integracao: 'automatica'
                });
                
            } catch (error) {
                console.error('Erro ao criar cliente SEFAZ:', error);
                res.status(500).json({ error: error.message });
            }
        });

        // Atualizar cliente existente com dados SEFAZ
        this.app.put('/api/clientes/:id/sync-sefaz', async (req, res) => {
            try {
                const clienteId = req.params.id;
                const cliente = await ClienteIndustrial.findById(clienteId);
                
                if (!cliente) {
                    return res.status(404).json({ error: 'Cliente n√£o encontrado' });
                }
                
                if (!cliente.cnpj) {
                    return res.status(400).json({ error: 'Cliente n√£o possui CNPJ para sincroniza√ß√£o' });
                }
                
                console.log(`üîÑ Sincronizando dados SEFAZ para: ${cliente.nomeEmpresa}`);
                
                // Buscar dados atualizados SEFAZ
                const dadosSEFAZ = await this.integradorSEFAZ.buscarDadosSEFAZ(cliente.cnpj);
                const dadosAtualizados = this.integradorSEFAZ.mapearParaSchemaCliente(dadosSEFAZ);
                
                // Preservar dados de neg√≥cio existentes
                const camposPreservados = {
                    etapaConsultoria: cliente.etapaConsultoria,
                    status: cliente.status,
                    kpis: cliente.kpis,
                    historico: cliente.historico,
                    documentos: cliente.documentos,
                    desafios: cliente.desafios
                };
                
                // Atualizar cliente
                const clienteAtualizado = await ClienteIndustrial.findByIdAndUpdate(
                    clienteId,
                    {
                        ...dadosAtualizados,
                        ...camposPreservados,
                        dataUltimaConsultaSefaz: new Date(),
                        dataUpdated: new Date()
                    },
                    { new: true, runValidators: true }
                );
                
                // Registrar sincroniza√ß√£o
                await this.adicionarHistorico(
                    clienteId,
                    'Dados sincronizados com SEFAZ',
                    'sync_sefaz',
                    { situacao_anterior: cliente.situacao_cadastral, situacao_atual: dadosSEFAZ.situacao_cadastral }
                );
                
                res.json({
                    success: true,
                    cliente: clienteAtualizado,
                    dados_sefaz: dadosSEFAZ,
                    sincronizacao: new Date().toISOString()
                });
                
            } catch (error) {
                console.error('Erro ao sincronizar SEFAZ:', error);
                res.status(500).json({ error: error.message });
            }
        });
        this.app.post('/api/clientes/novo', async (req, res) => {
            try {
                const cliente = await this.criarNovoCliente(req.body);
                res.json({ success: true, cliente });
            } catch (error) {
                console.error('Erro ao criar cliente:', error);
                res.status(500).json({ error: error.message });
            }
        });

        this.app.get('/api/clientes/:id/diagnostico', async (req, res) => {
            try {
                const diagnostico = await this.gerarDiagnosticoIA(req.params.id);
                res.json({ success: true, diagnostico });
            } catch (error) {
                res.status(500).json({ error: error.message });
            }
        });

        this.app.get('/api/clientes/:id/relatorio', async (req, res) => {
            try {
                const relatorio = await this.gerarRelatorioExecutivo(req.params.id);
                res.json({ success: true, relatorio });
            } catch (error) {
                res.status(500).json({ error: error.message });
            }
        });

        this.app.get('/api/clientes', async (req, res) => {
            try {
                const { setor, status, etapa, limit = 20, skip = 0 } = req.query;
                
                // Filtros din√¢micos
                const filtros = {};
                if (setor) filtros.setor = setor;
                if (status) filtros.status = status;
                if (etapa) filtros.etapaConsultoria = etapa;

                const clientes = await ClienteIndustrial
                    .find(filtros)
                    .select('-historico -documentos') // Campos pesados opcionais
                    .limit(parseInt(limit))
                    .skip(parseInt(skip))
                    .sort({ dataCreated: -1 });

                const total = await ClienteIndustrial.countDocuments(filtros);

                res.json({ 
                    success: true, 
                    clientes,
                    pagination: {
                        total,
                        limit: parseInt(limit),
                        skip: parseInt(skip),
                        hasMore: (parseInt(skip) + parseInt(limit)) < total
                    }
                });
            } catch (error) {
                res.status(500).json({ error: error.message });
            }
        });

        // Busca textual
        this.app.get('/api/clientes/buscar/:termo', async (req, res) => {
            try {
                const termo = req.params.termo;
                const clientes = await ClienteIndustrial
                    .find({ $text: { $search: termo } })
                    .select('-historico -documentos')
                    .limit(10);

                res.json({ success: true, clientes });
            } catch (error) {
                res.status(500).json({ error: error.message });
            }
        });

        // Atualizar cliente
        this.app.put('/api/clientes/:id', async (req, res) => {
            try {
                const cliente = await ClienteIndustrial.findByIdAndUpdate(
                    req.params.id,
                    { ...req.body, dataUpdated: new Date() },
                    { new: true, runValidators: true }
                );

                if (!cliente) {
                    return res.status(404).json({ error: 'Cliente n√£o encontrado' });
                }

                // Adicionar ao hist√≥rico
                await this.adicionarHistorico(req.params.id, 'Dados atualizados', 'update', req.body);

                res.json({ success: true, cliente });
            } catch (error) {
                res.status(500).json({ error: error.message });
            }
        });

        // Estat√≠sticas do dashboard
        this.app.get('/api/dashboard/stats', async (req, res) => {
            try {
                const stats = await this.gerarEstatisticasDashboard();
                res.json({ success: true, stats });
            } catch (error) {
                res.status(500).json({ error: error.message });
            }
        });

        // Dashboard para consultoria
        this.app.get('/dashboard', (req, res) => {
            res.send(this.getDashboardHTML());
        });
    }

    async criarNovoCliente(dadosCliente) {
        try {
            // Criar novo cliente no MongoDB
            const cliente = new ClienteIndustrial({
                ...dadosCliente,
                dataCreated: new Date(),
                status: 'lead',
                etapaConsultoria: 'diagnostico_inicial'
            });

            // An√°lise inicial com IA (se dispon√≠vel)
            if (this.openaiClient) {
                try {
                    const analiseIA = await this.analisarPerfilCliente(cliente);
                    cliente.analise_ia = analiseIA;
                } catch (error) {
                    console.log('IA offline, continuando sem an√°lise autom√°tica');
                    cliente.analise_ia = {
                        especializacao_recomendada: 'lean_manufacturing',
                        prioridades: ['eficiencia_operacional'],
                        roi_estimado: '250-400%',
                        timeline_meses: 6,
                        modulos: ['diagnostico_inicial'],
                        confidence_score: 0.5
                    };
                }
            }

            // Salvar no MongoDB
            const clienteSalvo = await cliente.save();
            
            // Adicionar registro no hist√≥rico
            await this.adicionarHistorico(clienteSalvo._id, 'Cliente criado no sistema', 'criacao');
            
            return clienteSalvo;
        } catch (error) {
            console.error('Erro ao criar cliente:', error);
            throw new Error(`Erro ao salvar cliente: ${error.message}`);
        }
    }

    async analisarPerfilClienteComSEFAZ(cliente, dadosSEFAZ) {
        if (!this.openaiClient) {
            return {
                status: 'offline',
                message: 'IA n√£o dispon√≠vel',
                dados_sefaz_utilizados: true
            };
        }

        const prompt = `
        Analise este perfil empresarial para consultoria industrial, considerando dados oficiais da Receita Federal:
        
        DADOS SEFAZ:
        Empresa: ${dadosSEFAZ.razao_social}
        CNPJ: ${dadosSEFAZ.cnpj}
        Situa√ß√£o: ${dadosSEFAZ.situacao_cadastral}
        Porte: ${dadosSEFAZ.porte}
        Setor: ${dadosSEFAZ.analise_industrial.setor_identificado}
        Atividade Principal: ${dadosSEFAZ.atividade_principal?.descricao}
        Anos de Opera√ß√£o: ${new Date().getFullYear() - new Date(dadosSEFAZ.data_abertura.split('/').reverse().join('-')).getFullYear()}
        Capital Social: ${dadosSEFAZ.capital_social}
        
        AN√ÅLISE AUTOM√ÅTICA SEFAZ:
        Especializa√ß√£o Sugerida: ${dadosSEFAZ.analise_industrial.especializacao_recomendada}
        Prioridades: ${dadosSEFAZ.analise_industrial.prioridades_consultoria.join(', ')}
        Potencial Cliente: ${dadosSEFAZ.analise_industrial.potencial_cliente ? 'Alto' : 'M√©dio'}
        
        Forne√ßa an√°lise detalhada:
        1. Viabilidade como cliente (score 0-100)
        2. Especializa√ß√£o mais adequada
        3. Potencial de ROI realista
        4. Principais desafios esperados
        5. Abordagem comercial recomendada
        6. Timeline de implementa√ß√£o
        7. Investimento estimado
        
        Responda em JSON estruturado considerando os dados oficiais SEFAZ.
        `;

        try {
            const response = await this.openaiClient.chat.completions.create({
                model: 'gpt-4o-mini',
                messages: [{ role: 'user', content: prompt }],
                max_tokens: 1000,
                temperature: 0.6
            });

            const analiseIA = JSON.parse(response.choices[0].message.content);
            
            return {
                ...analiseIA,
                dados_sefaz_utilizados: true,
                confidence_score: Math.min(0.95, analiseIA.viabilidade_score / 100),
                fonte_analise: 'IA + SEFAZ'
            };
            
        } catch (error) {
            console.log('Erro na an√°lise IA, usando an√°lise SEFAZ padr√£o');
            return {
                viabilidade_score: dadosSEFAZ.analise_industrial.potencial_cliente ? 75 : 45,
                especializacao_recomendada: dadosSEFAZ.analise_industrial.especializacao_recomendada,
                roi_estimado: dadosSEFAZ.porte === 'DEMAIS' ? '300-500%' : '200-350%',
                timeline_meses: dadosSEFAZ.analise_industrial.setor_identificado === 'quimica' ? 8 : 6,
                investimento_estimado: this.calcularInvestimentoEstimado(dadosSEFAZ.porte),
                abordagem_comercial: this.definirAbordagemComercial(dadosSEFAZ),
                dados_sefaz_utilizados: true,
                confidence_score: 0.75,
                fonte_analise: 'SEFAZ'
            };
        }
    }

    calcularInvestimentoEstimado(porte) {
        const investimentos = {
            'MICRO EMPRESA': 'R$ 15.000 - R$ 40.000',
            'EMPRESA DE PEQUENO PORTE': 'R$ 30.000 - R$ 80.000',
            'DEMAIS': 'R$ 80.000 - R$ 300.000'
        };
        
        return investimentos[porte] || 'R$ 50.000 - R$ 150.000';
    }

    definirAbordagemComercial(dadosSEFAZ) {
        if (dadosSEFAZ.situacao_cadastral !== 'ATIVA') {
            return 'Aguardar regulariza√ß√£o da situa√ß√£o cadastral';
        }
        
        if (dadosSEFAZ.porte === 'MICRO EMPRESA') {
            return 'Focar em solu√ß√µes simples, baixo custo e r√°pido retorno';
        } else if (dadosSEFAZ.porte === 'EMPRESA DE PEQUENO PORTE') {
            return 'Demonstrar cases de sucesso e ROI tang√≠vel';
        } else {
            return 'Apresenta√ß√£o t√©cnica detalhada com foco em inova√ß√£o';
        }
    }

    async gerarDiagnosticoIA(clienteId) {
        try {
            const cliente = await ClienteIndustrial.findById(clienteId);
            if (!cliente) throw new Error('Cliente n√£o encontrado');

            const diagnostico = {
                cliente_id: clienteId,
                data_diagnostico: new Date().toISOString(),
                situacao_atual: {},
                oportunidades: [],
                recomendacoes: [],
                roi_projetado: null
            };

            if (this.openaiClient) {
                try {
                    const prompt = `
                    Gere um diagn√≥stico industrial detalhado para:
                    
                    Empresa: ${cliente.nomeEmpresa}
                    Setor: ${cliente.setor}
                    Funcion√°rios: ${cliente.numeroFuncionarios}
                    Desafios: ${cliente.desafios?.join(', ')}
                    Especializa√ß√£o: ${cliente.especializacao}
                    
                    Inclua:
                    1. An√°lise da situa√ß√£o atual
                    2. Principais oportunidades de melhoria
                    3. Recomenda√ß√µes espec√≠ficas por especializa√ß√£o
                    4. ROI projetado realista
                    5. Timeline de implementa√ß√£o
                    6. KPIs a serem monitorados
                    
                    Formato JSON estruturado.
                    `;

                    const response = await this.openaiClient.chat.completions.create({
                        model: 'gpt-4o-mini',
                        messages: [{ role: 'user', content: prompt }],
                        max_tokens: 1200,
                        temperature: 0.6
                    });

                    Object.assign(diagnostico, JSON.parse(response.choices[0].message.content));
                } catch (error) {
                    console.log('Usando diagn√≥stico template offline');
                }
            }

            // Fallback se IA n√£o dispon√≠vel
            if (!diagnostico.situacao_atual.resumo) {
                diagnostico.situacao_atual = {
                    resumo: `An√°lise inicial para ${cliente.nomeEmpresa}`,
                    areas_criticas: ['Efici√™ncia operacional', 'Controle de qualidade', 'Gest√£o de estoque'],
                    indicadores_atuais: 'Em avalia√ß√£o',
                    nivel_maturidade: 'B√°sico'
                };
                diagnostico.oportunidades = [
                    'Implementa√ß√£o de metodologia Lean Manufacturing',
                    'Automa√ß√£o de processos cr√≠ticos',
                    'Sistema de gest√£o visual (5S)',
                    'Controle estat√≠stico de qualidade (CEP)',
                    'OEE Dashboard em tempo real'
                ];
                diagnostico.roi_projetado = '250-400% em 8-12 meses';
                diagnostico.timeline_meses = 6;
            }

            // Salvar diagn√≥stico no hist√≥rico do cliente
            await this.adicionarHistorico(clienteId, 'Diagn√≥stico IA gerado', 'diagnostico', diagnostico);
            
            return diagnostico;
        } catch (error) {
            console.error('Erro ao gerar diagn√≥stico:', error);
            throw error;
        }
    }

    async gerarRelatorioExecutivo(clienteId) {
        try {
            const cliente = await ClienteIndustrial.findById(clienteId);
            if (!cliente) throw new Error('Cliente n√£o encontrado');

            const relatorio = {
                cliente: cliente.nomeEmpresa,
                data: new Date().toLocaleDateString('pt-BR'),
                resumo_executivo: {},
                kpis_principais: {},
                recomendacoes: [],
                proximos_passos: []
            };

            if (this.openaiClient) {
                try {
                    const prompt = `
                    Gere um relat√≥rio executivo de consultoria industrial para:
                    
                    Cliente: ${cliente.nomeEmpresa}
                    Setor: ${cliente.setor}
                    Funcion√°rios: ${cliente.numeroFuncionarios}
                    Etapa: ${cliente.etapaConsultoria}
                    Especializa√ß√£o: ${cliente.especializacao}
                    KPIs Atuais: OEE ${cliente.kpis?.oee_atual || 'N/A'}%, Defeitos ${cliente.kpis?.defeitos_percentual || 'N/A'}%
                    
                    Inclua:
                    1. Resumo executivo profissional
                    2. KPIs principais e metas
                    3. Recomenda√ß√µes estrat√©gicas
                    4. Pr√≥ximos passos priorizados
                    5. Timeline de implementa√ß√£o
                    6. ROI esperado por fase
                    
                    Formato executivo profissional em JSON.
                    `;

                    const response = await this.openaiClient.chat.completions.create({
                        model: 'gpt-4o-mini',
                        messages: [{ role: 'user', content: prompt }],
                        max_tokens: 1000,
                        temperature: 0.5
                    });

                    Object.assign(relatorio, JSON.parse(response.choices[0].message.content));
                } catch (error) {
                    console.log('Usando relat√≥rio template offline');
                }
            }

            // Template offline personalizado por especializa√ß√£o
            if (!relatorio.resumo_executivo.situacao) {
                const especializacaoData = this.getTemplateEspecializacao(cliente.especializacao);
                
                relatorio.resumo_executivo = {
                    situacao: `Consultoria ${especializacaoData.nome} em andamento para ${cliente.nomeEmpresa}`,
                    progresso: `Fase ${cliente.etapaConsultoria} em execu√ß√£o`,
                    resultado_esperado: especializacaoData.resultado_esperado,
                    prazo_estimado: especializacaoData.prazo
                };
                
                relatorio.kpis_principais = especializacaoData.kpis;
                relatorio.proximos_passos = especializacaoData.proximos_passos;
                relatorio.investimento_estimado = especializacaoData.investimento;
            }

            // Salvar relat√≥rio no hist√≥rico
            await this.adicionarHistorico(clienteId, 'Relat√≥rio executivo gerado', 'relatorio', relatorio);
            
            return relatorio;
        } catch (error) {
            console.error('Erro ao gerar relat√≥rio:', error);
            throw error;
        }
    }

    getTemplateEspecializacao(especializacao) {
        const templates = {
            lean_manufacturing: {
                nome: 'Lean Manufacturing',
                resultado_esperado: 'Redu√ß√£o de 30-50% dos desperd√≠cios e aumento de 25% na produtividade',
                prazo: '4-6 meses',
                kpis: {
                    oee_target: '85%+',
                    reducao_desperdicios: '30-50%',
                    tempo_setup: '-40%',
                    estoque_wip: '-60%'
                },
                proximos_passos: [
                    'Mapeamento completo do fluxo de valor',
                    'Implementa√ß√£o de 5S nas √°reas piloto',
                    'Setup de c√©lulas de produ√ß√£o lean',
                    'Treinamento equipe em metodologia Lean'
                ],
                investimento: 'R$ 50.000 - R$ 150.000'
            },
            iso_compliance: {
                nome: 'ISO Compliance',
                resultado_esperado: 'Certifica√ß√£o ISO e melhoria de 40% nos processos de qualidade',
                prazo: '8-12 meses',
                kpis: {
                    conformidade: '95%+',
                    nao_conformidades: '-70%',
                    satisfacao_cliente: '90%+',
                    eficiencia_auditoria: '80%+'
                },
                proximos_passos: [
                    'Diagn√≥stico de conformidade atual',
                    'Elabora√ß√£o da documenta√ß√£o ISO',
                    'Treinamento de equipe auditora interna',
                    'Pr√©-auditoria e certifica√ß√£o'
                ],
                investimento: 'R$ 80.000 - R$ 200.000'
            },
            industry_40: {
                nome: 'Ind√∫stria 4.0',
                resultado_esperado: 'Digitaliza√ß√£o completa e aumento de 60% na efici√™ncia',
                prazo: '6-10 meses',
                kpis: {
                    digitalizacao: '90%+',
                    tempo_real_monitoramento: '100%',
                    predictive_maintenance: '80%',
                    data_driven_decisions: '85%'
                },
                proximos_passos: [
                    'Auditoria de infraestrutura tecnol√≥gica',
                    'Implementa√ß√£o de sensores IoT',
                    'Desenvolvimento de dashboards real-time',
                    'Integra√ß√£o com sistemas ERP'
                ],
                investimento: 'R$ 200.000 - R$ 500.000'
            },
            safety_management: {
                nome: 'Gest√£o de Seguran√ßa',
                resultado_esperado: 'Zero acidentes e 100% conformidade NR-12',
                prazo: '3-6 meses',
                kpis: {
                    acidentes: '0',
                    near_miss_reporting: '100%',
                    conformidade_nr12: '100%',
                    cultura_seguranca: '90%+'
                },
                proximos_passos: [
                    'Avalia√ß√£o completa de riscos (APR)',
                    'Adequa√ß√£o de m√°quinas √† NR-12',
                    'Treinamento em seguran√ßa comportamental',
                    'Implementa√ß√£o de sistema de near miss'
                ],
                investimento: 'R$ 30.000 - R$ 100.000'
            }
        };

        return templates[especializacao] || templates.lean_manufacturing;
    }

    async adicionarHistorico(clienteId, acao, tipo, detalhes = null) {
        try {
            await ClienteIndustrial.findByIdAndUpdate(
                clienteId,
                {
                    $push: {
                        historico: {
                            timestamp: new Date(),
                            acao,
                            tipo,
                            usuario: 'sistema',
                            detalhes
                        }
                    },
                    dataUpdated: new Date()
                }
            );
        } catch (error) {
            console.error('Erro ao adicionar hist√≥rico:', error);
        }
    }

    async gerarEstatisticasDashboard() {
        try {
            const stats = await Promise.all([
                ClienteIndustrial.countDocuments(),
                ClienteIndustrial.countDocuments({ status: 'ativo' }),
                ClienteIndustrial.countDocuments({ etapaConsultoria: 'implementacao' }),
                ClienteIndustrial.aggregate([
                    { $group: { _id: '$setor', count: { $sum: 1 } } },
                    { $sort: { count: -1 } }
                ]),
                ClienteIndustrial.aggregate([
                    { $group: { _id: '$especializacao', count: { $sum: 1 } } }
                ]),
                ClienteIndustrial.aggregate([
                    { $group: { _id: '$etapaConsultoria', count: { $sum: 1 } } }
                ])
            ]);

            return {
                total_clientes: stats[0],
                clientes_ativos: stats[1],
                projetos_implementacao: stats[2],
                clientes_por_setor: stats[3],
                especializacoes: stats[4],
                pipeline: stats[5],
                ultima_atualizacao: new Date().toISOString()
            };
        } catch (error) {
            console.error('Erro ao gerar estat√≠sticas:', error);
            return {
                total_clientes: 0,
                clientes_ativos: 0,
                projetos_implementacao: 0,
                erro: 'Dados indispon√≠veis temporariamente'
            };
        }
    }

    getDashboardHTML() {
        return `
        <!DOCTYPE html>
        <html lang="pt-BR">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>ArcSat Industrial - Gest√£o de Clientes</title>
            <style>
                body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 20px; background: #f5f7fa; }
                .header { background: linear-gradient(135deg, #0077FF, #00E0FF); color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; }
                .container { max-width: 1200px; margin: 0 auto; }
                .cards { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-bottom: 30px; }
                .card { background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                .btn { background: #0077FF; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; text-decoration: none; display: inline-block; margin: 5px; }
                .btn:hover { background: #0056CC; }
                .status { padding: 5px 10px; border-radius: 20px; font-size: 12px; font-weight: bold; }
                .status.ativo { background: #e8f5e8; color: #2d5a2d; }
                .footer { text-align: center; margin-top: 40px; color: #666; }
                #clientes { margin-top: 20px; }
                .cliente-item { background: white; margin: 10px 0; padding: 15px; border-radius: 8px; border-left: 4px solid #0077FF; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üè≠ ArcSat Industrial - Gest√£o de Clientes</h1>
                    <p>Sistema inteligente para consultoria industrial com IA</p>
                </div>
                
                <div class="cards">
                    <div class="card">
                        <h3>ÔøΩ Busca por CNPJ</h3>
                        <p>Criar cliente automaticamente via CNPJ com dados da Receita Federal</p>
                        <input type="text" id="cnpjInput" placeholder="Digite o CNPJ (somente n√∫meros)" maxlength="14" style="width: 100%; padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px;">
                        <button class="btn" onclick="buscarPorCNPJ()">üè≠ Buscar na SEFAZ</button>
                        <button class="btn" onclick="validarCNPJ()">‚úÖ Validar CNPJ</button>
                    </div>
                    
                    <div class="card">
                        <h3>ÔøΩüìä Novo Cliente Manual</h3>
                        <p>Cadastrar nova ind√∫stria manualmente</p>
                        <button class="btn" onclick="novoCliente()">+ Adicionar Cliente</button>
                    </div>
                    
                    <div class="card">
                        <h3>üîç Diagn√≥stico IA</h3>
                        <p>Gerar an√°lise autom√°tica com intelig√™ncia artificial</p>
                        <button class="btn" onclick="gerarDiagnostico()">ü§ñ Diagn√≥stico IA</button>
                    </div>
                    
                    <div class="card">
                        <h3>üìã Relat√≥rio Executivo</h3>
                        <p>Relat√≥rio profissional para apresenta√ß√£o</p>
                        <button class="btn" onclick="gerarRelatorio()">üìä Gerar Relat√≥rio</button>
                    </div>
                </div>
                
                <div class="card">
                    <h3>üìà Resultado da Consulta SEFAZ</h3>
                    <div id="resultadoSefaz" style="display: none;">
                        <div id="dadosEmpresa"></div>
                        <button class="btn" onclick="criarClienteSefaz()" id="btnCriarSefaz" style="display: none;">üè≠ Criar Cliente com Dados SEFAZ</button>
                    </div>
                </div>
                
                <div class="card">
                    <h3>üë• Clientes Ativos</h3>
                    <div id="clientes">Carregando clientes...</div>
                    <button class="btn" onclick="carregarClientes()">üîÑ Atualizar Lista</button>
                </div>
            </div>
            
            <div class="footer">
                <p>üöÄ ArcSat Industrial - Powered by Azure AI | Status: <span id="status">Verificando...</span></p>
            </div>

            <script>
                let dadosSefazGlobal = null;

                // Verificar status do sistema
                fetch('/health')
                    .then(r => r.json())
                    .then(data => {
                        const status = data.mongodb === 'connected' && data.azure_ai ? '‚úÖ Todos os sistemas Online' : 
                                     data.mongodb === 'connected' ? '‚ö†Ô∏è MongoDB OK, IA Offline' : '‚ùå MongoDB Offline';
                        document.getElementById('status').textContent = status;
                    });

                // Formatar CNPJ enquanto digita
                document.addEventListener('DOMContentLoaded', function() {
                    const cnpjInput = document.getElementById('cnpjInput');
                    if (cnpjInput) {
                        cnpjInput.addEventListener('input', function(e) {
                            let value = e.target.value.replace(/\\D/g, '');
                            if (value.length <= 14) {
                                e.target.value = value;
                            }
                        });
                    }
                });

                // Validar CNPJ
                function validarCNPJ() {
                    const cnpj = document.getElementById('cnpjInput').value;
                    if (!cnpj) {
                        alert('Digite um CNPJ para validar');
                        return;
                    }

                    fetch('/api/sefaz/validar/' + cnpj)
                        .then(r => r.json())
                        .then(data => {
                            if (data.success) {
                                if (data.valido) {
                                    alert('‚úÖ CNPJ v√°lido! Pode prosseguir com a consulta.');
                                } else {
                                    alert('‚ùå CNPJ inv√°lido: ' + data.erro);
                                }
                            }
                        })
                        .catch(err => alert('Erro na valida√ß√£o: ' + err.message));
                }

                // Buscar dados na SEFAZ
                function buscarPorCNPJ() {
                    const cnpj = document.getElementById('cnpjInput').value;
                    if (!cnpj) {
                        alert('Digite um CNPJ para buscar');
                        return;
                    }

                    const resultadoDiv = document.getElementById('resultadoSefaz');
                    const dadosDiv = document.getElementById('dadosEmpresa');
                    
                    resultadoDiv.style.display = 'block';
                    dadosDiv.innerHTML = '<p>üîç Consultando SEFAZ...</p>';

                    fetch('/api/sefaz/consultar/' + cnpj)
                        .then(r => r.json())
                        .then(data => {
                            if (data.success) {
                                dadosSefazGlobal = data;
                                exibirDadosSefaz(data);
                                document.getElementById('btnCriarSefaz').style.display = 'inline-block';
                            } else {
                                dadosDiv.innerHTML = '<p style="color: red;">‚ùå ' + data.error + '</p>';
                                document.getElementById('btnCriarSefaz').style.display = 'none';
                            }
                        })
                        .catch(err => {
                            dadosDiv.innerHTML = '<p style="color: red;">‚ùå Erro de conex√£o: ' + err.message + '</p>';
                            document.getElementById('btnCriarSefaz').style.display = 'none';
                        });
                }

                // Exibir dados obtidos da SEFAZ
                function exibirDadosSefaz(data) {
                    const sefaz = data.dados_sefaz;
                    const cliente = data.dados_cliente;
                    const recom = data.recomendacoes;
                    
                    const statusClass = sefaz.situacao_cadastral === 'ATIVA' ? 'ativo' : 'inativo';
                    
                    document.getElementById('dadosEmpresa').innerHTML = 
                        '<h4>üè≠ ' + sefaz.razao_social + ' <span class="status ' + statusClass + '">' + sefaz.situacao_cadastral + '</span></h4>' +
                        '<p><strong>CNPJ:</strong> ' + sefaz.cnpj + '</p>' +
                        '<p><strong>Nome Fantasia:</strong> ' + (sefaz.nome_fantasia || 'N/A') + '</p>' +
                        '<p><strong>Porte:</strong> ' + sefaz.porte + ' | <strong>Setor:</strong> ' + recom.setor_identificado + '</p>' +
                        '<p><strong>Endere√ßo:</strong> ' + sefaz.endereco.endereco_completo + '</p>' +
                        '<p><strong>Atividade Principal:</strong> ' + (sefaz.atividade_principal?.descricao || 'N/A') + '</p>' +
                        '<p><strong>Especializa√ß√£o Recomendada:</strong> ' + recom.especializacao_recomendada.replace('_', ' ').toUpperCase() + '</p>' +
                        '<p><strong>Potencial Cliente:</strong> ' + (recom.potencial_cliente ? '‚úÖ Alto' : '‚ö†Ô∏è M√©dio') + '</p>' +
                        '<details><summary><strong>An√°lise Detalhada</strong></summary>' +
                        '<ul>' + recom.observacoes.map(obs => '<li>' + obs + '</li>').join('') + '</ul>' +
                        '</details>';
                }

                // Criar cliente com dados SEFAZ
                function criarClienteSefaz() {
                    if (!dadosSefazGlobal) {
                        alert('Nenhum dado SEFAZ dispon√≠vel');
                        return;
                    }

                    const dadosAdicionais = {};
                    
                    // Perguntar dados complementares
                    const responsavel = prompt('Nome do respons√°vel/contato:');
                    const telefone = prompt('Telefone de contato:');
                    const email = prompt('Email de contato:');
                    const desafios = prompt('Principais desafios (separados por v√≠rgula):');
                    
                    if (responsavel) dadosAdicionais['contato.responsavel'] = responsavel;
                    if (telefone) dadosAdicionais['contato.telefone'] = telefone;
                    if (email) dadosAdicionais['contato.email'] = email;
                    if (desafios) dadosAdicionais.desafios = desafios.split(',').map(d => d.trim());

                    fetch('/api/clientes/novo-sefaz', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            cnpj: dadosSefazGlobal.dados_sefaz.cnpj,
                            dadosAdicionais
                        })
                    })
                    .then(r => r.json())
                    .then(data => {
                        if (data.success) {
                            alert('‚úÖ Cliente criado com sucesso!\\n\\nID: ' + data.cliente._id + '\\nEmpresa: ' + data.cliente.nomeEmpresa);
                            carregarClientes();
                            // Limpar formul√°rio
                            document.getElementById('cnpjInput').value = '';
                            document.getElementById('resultadoSefaz').style.display = 'none';
                            dadosSefazGlobal = null;
                        } else {
                            alert('‚ùå ' + data.error);
                        }
                    })
                    .catch(err => alert('‚ùå Erro: ' + err.message));
                }

                // Carregar lista de clientes
                function carregarClientes() {
                    fetch('/api/clientes?limit=10')
                        .then(r => r.json())
                        .then(data => {
                            const container = document.getElementById('clientes');
                            if (data.clientes.length === 0) {
                                container.innerHTML = '<p>Nenhum cliente cadastrado ainda.</p>';
                                return;
                            }
                            
                            container.innerHTML = data.clientes.map(cliente => 
                                '<div class="cliente-item">' +
                                '<h4>' + cliente.nomeEmpresa + ' <span class="status ' + cliente.status + '">' + cliente.status + '</span></h4>' +
                                '<p><strong>Setor:</strong> ' + cliente.setor + ' | <strong>Funcion√°rios:</strong> ' + cliente.numeroFuncionarios + '</p>' +
                                '<p><strong>Etapa:</strong> ' + cliente.etapaConsultoria + ' | <strong>Especializa√ß√£o:</strong> ' + cliente.especializacao + '</p>' +
                                '<p><strong>Criado:</strong> ' + new Date(cliente.dataCreated).toLocaleDateString('pt-BR') + '</p>' +
                                '<button class="btn" onclick="verDiagnostico(\\'' + cliente._id + '\\')">üîç Diagn√≥stico</button>' +
                                '<button class="btn" onclick="verRelatorio(\\'' + cliente._id + '\\')">üìä Relat√≥rio</button>' +
                                '</div>'
                            ).join('');
                            
                            // Mostrar informa√ß√£o de pagina√ß√£o
                            if (data.pagination) {
                                container.innerHTML += '<p><strong>Total:</strong> ' + data.pagination.total + ' clientes</p>';
                            }
                        })
                        .catch(err => {
                            document.getElementById('clientes').innerHTML = '<p>Erro ao carregar clientes. Verifique se o servidor est√° rodando.</p>';
                            console.error('Erro:', err);
                        });
                }

                function novoCliente() {
                    const nome = prompt('Nome da empresa:');
                    const setor = prompt('Setor (ex: metalurgica, automotiva, quimica, alimenticia):');
                    const funcionarios = prompt('N√∫mero de funcion√°rios:');
                    const cnpj = prompt('CNPJ (opcional):');
                    const desafios = prompt('Principais desafios (separados por v√≠rgula):');
                    const especializacao = prompt('Especializa√ß√£o (lean_manufacturing, iso_compliance, industry_40, safety_management):') || 'lean_manufacturing';
                    
                    if (nome && setor && funcionarios) {
                        const clienteData = {
                            nomeEmpresa: nome,
                            setor: setor,
                            numeroFuncionarios: parseInt(funcionarios),
                            especializacao: especializacao
                        };
                        
                        if (cnpj) clienteData.cnpj = cnpj;
                        if (desafios) clienteData.desafios = desafios.split(',').map(d => d.trim());
                        
                        fetch('/api/clientes/novo', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(clienteData)
                        })
                        .then(r => r.json())
                        .then(data => {
                            if (data.success) {
                                alert('‚úÖ Cliente criado com sucesso! ID: ' + data.cliente._id);
                                carregarClientes();
                            } else {
                                alert('‚ùå Erro: ' + (data.error || 'Erro desconhecido'));
                            }
                        })
                        .catch(err => {
                            alert('‚ùå Erro de conex√£o: ' + err.message);
                        });
                    }
                }

                function gerarDiagnostico() {
                    const clienteId = prompt('ID do cliente (ou deixe vazio para o √∫ltimo):');
                    if (!clienteId) {
                        alert('Primeiro cadastre um cliente');
                        return;
                    }
                    
                    fetch('/api/clientes/' + clienteId + '/diagnostico')
                        .then(r => r.json())
                        .then(data => {
                            alert('‚úÖ Diagn√≥stico gerado! Verifique o console para detalhes.');
                            console.log('Diagn√≥stico:', data.diagnostico);
                        });
                }

                function verDiagnostico(clienteId) {
                    fetch('/api/clientes/' + clienteId + '/diagnostico')
                        .then(r => r.json())
                        .then(data => {
                            alert('Diagn√≥stico gerado! Verifique o console para detalhes.');
                            console.log('Diagn√≥stico:', data.diagnostico);
                        });
                }

                function verRelatorio(clienteId) {
                    fetch('/api/clientes/' + clienteId + '/relatorio')
                        .then(r => r.json())
                        .then(data => {
                            alert('Relat√≥rio gerado! Verifique o console para detalhes.');
                            console.log('Relat√≥rio:', data.relatorio);
                        });
                }

                // Carregar clientes ao iniciar
                carregarClientes();
            </script>
        </body>
        </html>
        `;
    }

    start() {
        this.app.listen(this.port, () => {
            console.log(`üöÄ ArcSat Industrial - Gest√£o de Clientes`);
            console.log(`üåê Servidor rodando em: http://localhost:${this.port}`);
            console.log(`üìä Dashboard dispon√≠vel em: http://localhost:${this.port}/dashboard`);
            console.log(`ü§ñ Azure AI: ${this.openaiClient ? 'Conectado' : 'Offline'}`);
            console.log(`‚è∞ Iniciado em: ${new Date().toLocaleString('pt-BR')}`);
        });
    }
}

// Inicializar o sistema
const gestaoClientes = new GestaoClientesIndustrial();
gestaoClientes.start();